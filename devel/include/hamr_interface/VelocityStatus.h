// Generated by gencpp from file hamr_interface/VelocityStatus.msg
// DO NOT EDIT!


#ifndef HAMR_INTERFACE_MESSAGE_VELOCITYSTATUS_H
#define HAMR_INTERFACE_MESSAGE_VELOCITYSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hamr_interface
{
template <class ContainerAllocator>
struct VelocityStatus_
{
  typedef VelocityStatus_<ContainerAllocator> Type;

  VelocityStatus_()
    : sensed_t_motor_enc_value(0)
    , sensed_t_motor_velocity(0)
    , sensed_turret_position(0)
    , sensed_turret_velocity(0)
    , desired_turret_velocity(0)
    , pid_error(0)  {
    }
  VelocityStatus_(const ContainerAllocator& _alloc)
    : sensed_t_motor_enc_value(0)
    , sensed_t_motor_velocity(0)
    , sensed_turret_position(0)
    , sensed_turret_velocity(0)
    , desired_turret_velocity(0)
    , pid_error(0)  {
  (void)_alloc;
    }



   typedef int16_t _sensed_t_motor_enc_value_type;
  _sensed_t_motor_enc_value_type sensed_t_motor_enc_value;

   typedef int16_t _sensed_t_motor_velocity_type;
  _sensed_t_motor_velocity_type sensed_t_motor_velocity;

   typedef int16_t _sensed_turret_position_type;
  _sensed_turret_position_type sensed_turret_position;

   typedef int16_t _sensed_turret_velocity_type;
  _sensed_turret_velocity_type sensed_turret_velocity;

   typedef int16_t _desired_turret_velocity_type;
  _desired_turret_velocity_type desired_turret_velocity;

   typedef int16_t _pid_error_type;
  _pid_error_type pid_error;




  typedef boost::shared_ptr< ::hamr_interface::VelocityStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hamr_interface::VelocityStatus_<ContainerAllocator> const> ConstPtr;

}; // struct VelocityStatus_

typedef ::hamr_interface::VelocityStatus_<std::allocator<void> > VelocityStatus;

typedef boost::shared_ptr< ::hamr_interface::VelocityStatus > VelocityStatusPtr;
typedef boost::shared_ptr< ::hamr_interface::VelocityStatus const> VelocityStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hamr_interface::VelocityStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hamr_interface::VelocityStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hamr_interface

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'hamr_interface': ['/home/modlab/Documents/hamr-ros/src/hamr_interface/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hamr_interface::VelocityStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hamr_interface::VelocityStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hamr_interface::VelocityStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hamr_interface::VelocityStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hamr_interface::VelocityStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hamr_interface::VelocityStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hamr_interface::VelocityStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7b5b1bb227b7302d7a37dfb6950287a7";
  }

  static const char* value(const ::hamr_interface::VelocityStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7b5b1bb227b7302dULL;
  static const uint64_t static_value2 = 0x7a37dfb6950287a7ULL;
};

template<class ContainerAllocator>
struct DataType< ::hamr_interface::VelocityStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hamr_interface/VelocityStatus";
  }

  static const char* value(const ::hamr_interface::VelocityStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hamr_interface::VelocityStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 sensed_t_motor_enc_value\n\
int16 sensed_t_motor_velocity\n\
int16 sensed_turret_position\n\
int16 sensed_turret_velocity		\n\
int16 desired_turret_velocity\n\
int16 pid_error\n\
";
  }

  static const char* value(const ::hamr_interface::VelocityStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hamr_interface::VelocityStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sensed_t_motor_enc_value);
      stream.next(m.sensed_t_motor_velocity);
      stream.next(m.sensed_turret_position);
      stream.next(m.sensed_turret_velocity);
      stream.next(m.desired_turret_velocity);
      stream.next(m.pid_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct VelocityStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hamr_interface::VelocityStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hamr_interface::VelocityStatus_<ContainerAllocator>& v)
  {
    s << indent << "sensed_t_motor_enc_value: ";
    Printer<int16_t>::stream(s, indent + "  ", v.sensed_t_motor_enc_value);
    s << indent << "sensed_t_motor_velocity: ";
    Printer<int16_t>::stream(s, indent + "  ", v.sensed_t_motor_velocity);
    s << indent << "sensed_turret_position: ";
    Printer<int16_t>::stream(s, indent + "  ", v.sensed_turret_position);
    s << indent << "sensed_turret_velocity: ";
    Printer<int16_t>::stream(s, indent + "  ", v.sensed_turret_velocity);
    s << indent << "desired_turret_velocity: ";
    Printer<int16_t>::stream(s, indent + "  ", v.desired_turret_velocity);
    s << indent << "pid_error: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pid_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HAMR_INTERFACE_MESSAGE_VELOCITYSTATUS_H
