# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hamr_test/HoloStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class HoloStatus(genpy.Message):
  _md5sum = "c48cef1fe922ba8d40359f53d4f1b99d"
  _type = "hamr_test/HoloStatus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int16 setpoint_x
int16 setpoint_y
int16 setpoint_r
int16 xdot
int16 ydot
int16 tdot
int16 left_vel
int16 right_vel
int16 turret_vel
int16 desired_left_vel
int16 desired_right_vel
int16 desired_turret_vel
int16 sensed_drive_angle"""
  __slots__ = ['setpoint_x','setpoint_y','setpoint_r','xdot','ydot','tdot','left_vel','right_vel','turret_vel','desired_left_vel','desired_right_vel','desired_turret_vel','sensed_drive_angle']
  _slot_types = ['int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       setpoint_x,setpoint_y,setpoint_r,xdot,ydot,tdot,left_vel,right_vel,turret_vel,desired_left_vel,desired_right_vel,desired_turret_vel,sensed_drive_angle

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HoloStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.setpoint_x is None:
        self.setpoint_x = 0
      if self.setpoint_y is None:
        self.setpoint_y = 0
      if self.setpoint_r is None:
        self.setpoint_r = 0
      if self.xdot is None:
        self.xdot = 0
      if self.ydot is None:
        self.ydot = 0
      if self.tdot is None:
        self.tdot = 0
      if self.left_vel is None:
        self.left_vel = 0
      if self.right_vel is None:
        self.right_vel = 0
      if self.turret_vel is None:
        self.turret_vel = 0
      if self.desired_left_vel is None:
        self.desired_left_vel = 0
      if self.desired_right_vel is None:
        self.desired_right_vel = 0
      if self.desired_turret_vel is None:
        self.desired_turret_vel = 0
      if self.sensed_drive_angle is None:
        self.sensed_drive_angle = 0
    else:
      self.setpoint_x = 0
      self.setpoint_y = 0
      self.setpoint_r = 0
      self.xdot = 0
      self.ydot = 0
      self.tdot = 0
      self.left_vel = 0
      self.right_vel = 0
      self.turret_vel = 0
      self.desired_left_vel = 0
      self.desired_right_vel = 0
      self.desired_turret_vel = 0
      self.sensed_drive_angle = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_13h.pack(_x.setpoint_x, _x.setpoint_y, _x.setpoint_r, _x.xdot, _x.ydot, _x.tdot, _x.left_vel, _x.right_vel, _x.turret_vel, _x.desired_left_vel, _x.desired_right_vel, _x.desired_turret_vel, _x.sensed_drive_angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.setpoint_x, _x.setpoint_y, _x.setpoint_r, _x.xdot, _x.ydot, _x.tdot, _x.left_vel, _x.right_vel, _x.turret_vel, _x.desired_left_vel, _x.desired_right_vel, _x.desired_turret_vel, _x.sensed_drive_angle,) = _struct_13h.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_13h.pack(_x.setpoint_x, _x.setpoint_y, _x.setpoint_r, _x.xdot, _x.ydot, _x.tdot, _x.left_vel, _x.right_vel, _x.turret_vel, _x.desired_left_vel, _x.desired_right_vel, _x.desired_turret_vel, _x.sensed_drive_angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.setpoint_x, _x.setpoint_y, _x.setpoint_r, _x.xdot, _x.ydot, _x.tdot, _x.left_vel, _x.right_vel, _x.turret_vel, _x.desired_left_vel, _x.desired_right_vel, _x.desired_turret_vel, _x.sensed_drive_angle,) = _struct_13h.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_13h = struct.Struct("<13h")
