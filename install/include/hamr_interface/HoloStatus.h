// Generated by gencpp from file hamr_interface/HoloStatus.msg
// DO NOT EDIT!


#ifndef HAMR_INTERFACE_MESSAGE_HOLOSTATUS_H
#define HAMR_INTERFACE_MESSAGE_HOLOSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hamr_interface
{
template <class ContainerAllocator>
struct HoloStatus_
{
  typedef HoloStatus_<ContainerAllocator> Type;

  HoloStatus_()
    : setpoint_x(0)
    , setpoint_y(0)
    , setpoint_r(0)
    , xdot(0)
    , ydot(0)
    , tdot(0)
    , left_vel(0)
    , right_vel(0)
    , turret_vel(0)
    , desired_left_vel(0)
    , desired_right_vel(0)
    , desired_turret_vel(0)
    , sensed_drive_angle(0)  {
    }
  HoloStatus_(const ContainerAllocator& _alloc)
    : setpoint_x(0)
    , setpoint_y(0)
    , setpoint_r(0)
    , xdot(0)
    , ydot(0)
    , tdot(0)
    , left_vel(0)
    , right_vel(0)
    , turret_vel(0)
    , desired_left_vel(0)
    , desired_right_vel(0)
    , desired_turret_vel(0)
    , sensed_drive_angle(0)  {
  (void)_alloc;
    }



   typedef int16_t _setpoint_x_type;
  _setpoint_x_type setpoint_x;

   typedef int16_t _setpoint_y_type;
  _setpoint_y_type setpoint_y;

   typedef int16_t _setpoint_r_type;
  _setpoint_r_type setpoint_r;

   typedef int16_t _xdot_type;
  _xdot_type xdot;

   typedef int16_t _ydot_type;
  _ydot_type ydot;

   typedef int16_t _tdot_type;
  _tdot_type tdot;

   typedef int16_t _left_vel_type;
  _left_vel_type left_vel;

   typedef int16_t _right_vel_type;
  _right_vel_type right_vel;

   typedef int16_t _turret_vel_type;
  _turret_vel_type turret_vel;

   typedef int16_t _desired_left_vel_type;
  _desired_left_vel_type desired_left_vel;

   typedef int16_t _desired_right_vel_type;
  _desired_right_vel_type desired_right_vel;

   typedef int16_t _desired_turret_vel_type;
  _desired_turret_vel_type desired_turret_vel;

   typedef int16_t _sensed_drive_angle_type;
  _sensed_drive_angle_type sensed_drive_angle;




  typedef boost::shared_ptr< ::hamr_interface::HoloStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hamr_interface::HoloStatus_<ContainerAllocator> const> ConstPtr;

}; // struct HoloStatus_

typedef ::hamr_interface::HoloStatus_<std::allocator<void> > HoloStatus;

typedef boost::shared_ptr< ::hamr_interface::HoloStatus > HoloStatusPtr;
typedef boost::shared_ptr< ::hamr_interface::HoloStatus const> HoloStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hamr_interface::HoloStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hamr_interface::HoloStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hamr_interface

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'hamr_interface': ['/home/modlab/Documents/hamr-ros/src/hamr_interface/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hamr_interface::HoloStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hamr_interface::HoloStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hamr_interface::HoloStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hamr_interface::HoloStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hamr_interface::HoloStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hamr_interface::HoloStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hamr_interface::HoloStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c48cef1fe922ba8d40359f53d4f1b99d";
  }

  static const char* value(const ::hamr_interface::HoloStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc48cef1fe922ba8dULL;
  static const uint64_t static_value2 = 0x40359f53d4f1b99dULL;
};

template<class ContainerAllocator>
struct DataType< ::hamr_interface::HoloStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hamr_interface/HoloStatus";
  }

  static const char* value(const ::hamr_interface::HoloStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hamr_interface::HoloStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 setpoint_x\n\
int16 setpoint_y\n\
int16 setpoint_r\n\
int16 xdot\n\
int16 ydot\n\
int16 tdot\n\
int16 left_vel\n\
int16 right_vel\n\
int16 turret_vel\n\
int16 desired_left_vel\n\
int16 desired_right_vel\n\
int16 desired_turret_vel\n\
int16 sensed_drive_angle\n\
";
  }

  static const char* value(const ::hamr_interface::HoloStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hamr_interface::HoloStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.setpoint_x);
      stream.next(m.setpoint_y);
      stream.next(m.setpoint_r);
      stream.next(m.xdot);
      stream.next(m.ydot);
      stream.next(m.tdot);
      stream.next(m.left_vel);
      stream.next(m.right_vel);
      stream.next(m.turret_vel);
      stream.next(m.desired_left_vel);
      stream.next(m.desired_right_vel);
      stream.next(m.desired_turret_vel);
      stream.next(m.sensed_drive_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct HoloStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hamr_interface::HoloStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hamr_interface::HoloStatus_<ContainerAllocator>& v)
  {
    s << indent << "setpoint_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.setpoint_x);
    s << indent << "setpoint_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.setpoint_y);
    s << indent << "setpoint_r: ";
    Printer<int16_t>::stream(s, indent + "  ", v.setpoint_r);
    s << indent << "xdot: ";
    Printer<int16_t>::stream(s, indent + "  ", v.xdot);
    s << indent << "ydot: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ydot);
    s << indent << "tdot: ";
    Printer<int16_t>::stream(s, indent + "  ", v.tdot);
    s << indent << "left_vel: ";
    Printer<int16_t>::stream(s, indent + "  ", v.left_vel);
    s << indent << "right_vel: ";
    Printer<int16_t>::stream(s, indent + "  ", v.right_vel);
    s << indent << "turret_vel: ";
    Printer<int16_t>::stream(s, indent + "  ", v.turret_vel);
    s << indent << "desired_left_vel: ";
    Printer<int16_t>::stream(s, indent + "  ", v.desired_left_vel);
    s << indent << "desired_right_vel: ";
    Printer<int16_t>::stream(s, indent + "  ", v.desired_right_vel);
    s << indent << "desired_turret_vel: ";
    Printer<int16_t>::stream(s, indent + "  ", v.desired_turret_vel);
    s << indent << "sensed_drive_angle: ";
    Printer<int16_t>::stream(s, indent + "  ", v.sensed_drive_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HAMR_INTERFACE_MESSAGE_HOLOSTATUS_H
