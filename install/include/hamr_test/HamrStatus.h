// Generated by gencpp from file hamr_test/HamrStatus.msg
// DO NOT EDIT!


#ifndef HAMR_TEST_MESSAGE_HAMRSTATUS_H
#define HAMR_TEST_MESSAGE_HAMRSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <hamr_test/MotorStatus.h>
#include <hamr_test/MotorStatus.h>
#include <hamr_test/MotorStatus.h>

namespace hamr_test
{
template <class ContainerAllocator>
struct HamrStatus_
{
  typedef HamrStatus_<ContainerAllocator> Type;

  HamrStatus_()
    : timestamp()
    , looptime(0)
    , left_motor()
    , right_motor()
    , turret_motor()  {
    }
  HamrStatus_(const ContainerAllocator& _alloc)
    : timestamp()
    , looptime(0)
    , left_motor(_alloc)
    , right_motor(_alloc)
    , turret_motor(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;

   typedef uint16_t _looptime_type;
  _looptime_type looptime;

   typedef  ::hamr_test::MotorStatus_<ContainerAllocator>  _left_motor_type;
  _left_motor_type left_motor;

   typedef  ::hamr_test::MotorStatus_<ContainerAllocator>  _right_motor_type;
  _right_motor_type right_motor;

   typedef  ::hamr_test::MotorStatus_<ContainerAllocator>  _turret_motor_type;
  _turret_motor_type turret_motor;




  typedef boost::shared_ptr< ::hamr_test::HamrStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hamr_test::HamrStatus_<ContainerAllocator> const> ConstPtr;

}; // struct HamrStatus_

typedef ::hamr_test::HamrStatus_<std::allocator<void> > HamrStatus;

typedef boost::shared_ptr< ::hamr_test::HamrStatus > HamrStatusPtr;
typedef boost::shared_ptr< ::hamr_test::HamrStatus const> HamrStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hamr_test::HamrStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hamr_test::HamrStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hamr_test

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'hamr_test': ['/home/modlab/Documents/hamr-ros/src/hamr_test/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hamr_test::HamrStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hamr_test::HamrStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hamr_test::HamrStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hamr_test::HamrStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hamr_test::HamrStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hamr_test::HamrStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hamr_test::HamrStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "425627e993fa73fa789175bea46a409d";
  }

  static const char* value(const ::hamr_test::HamrStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x425627e993fa73faULL;
  static const uint64_t static_value2 = 0x789175bea46a409dULL;
};

template<class ContainerAllocator>
struct DataType< ::hamr_test::HamrStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hamr_test/HamrStatus";
  }

  static const char* value(const ::hamr_test::HamrStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hamr_test::HamrStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time timestamp\n\
uint16 looptime\n\
hamr_test/MotorStatus left_motor\n\
hamr_test/MotorStatus right_motor\n\
hamr_test/MotorStatus turret_motor\n\
================================================================================\n\
MSG: hamr_test/MotorStatus\n\
uint16 position\n\
int16 velocity\n\
int16 desired_velocity\n\
int16 speed_cmd\n\
int16 pidError\n\
";
  }

  static const char* value(const ::hamr_test::HamrStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hamr_test::HamrStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.looptime);
      stream.next(m.left_motor);
      stream.next(m.right_motor);
      stream.next(m.turret_motor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct HamrStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hamr_test::HamrStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hamr_test::HamrStatus_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
    s << indent << "looptime: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.looptime);
    s << indent << "left_motor: ";
    s << std::endl;
    Printer< ::hamr_test::MotorStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.left_motor);
    s << indent << "right_motor: ";
    s << std::endl;
    Printer< ::hamr_test::MotorStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.right_motor);
    s << indent << "turret_motor: ";
    s << std::endl;
    Printer< ::hamr_test::MotorStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.turret_motor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HAMR_TEST_MESSAGE_HAMRSTATUS_H
