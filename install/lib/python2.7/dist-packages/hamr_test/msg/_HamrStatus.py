# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hamr_test/HamrStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import hamr_test.msg
import genpy

class HamrStatus(genpy.Message):
  _md5sum = "c8d041d77470a8b1b7fefe76d3b12aeb"
  _type = "hamr_test/HamrStatus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """time timestamp
uint16 looptime
hamr_test/MotorStatus left_motor
hamr_test/MotorStatus right_motor
hamr_test/MotorStatus turret_motor
================================================================================
MSG: hamr_test/MotorStatus
uint16 position
int16 velocity
int16 desired_velocity"""
  __slots__ = ['timestamp','looptime','left_motor','right_motor','turret_motor']
  _slot_types = ['time','uint16','hamr_test/MotorStatus','hamr_test/MotorStatus','hamr_test/MotorStatus']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,looptime,left_motor,right_motor,turret_motor

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HamrStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.looptime is None:
        self.looptime = 0
      if self.left_motor is None:
        self.left_motor = hamr_test.msg.MotorStatus()
      if self.right_motor is None:
        self.right_motor = hamr_test.msg.MotorStatus()
      if self.turret_motor is None:
        self.turret_motor = hamr_test.msg.MotorStatus()
    else:
      self.timestamp = genpy.Time()
      self.looptime = 0
      self.left_motor = hamr_test.msg.MotorStatus()
      self.right_motor = hamr_test.msg.MotorStatus()
      self.turret_motor = hamr_test.msg.MotorStatus()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2I2H2hH2hH2h.pack(_x.timestamp.secs, _x.timestamp.nsecs, _x.looptime, _x.left_motor.position, _x.left_motor.velocity, _x.left_motor.desired_velocity, _x.right_motor.position, _x.right_motor.velocity, _x.right_motor.desired_velocity, _x.turret_motor.position, _x.turret_motor.velocity, _x.turret_motor.desired_velocity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.left_motor is None:
        self.left_motor = hamr_test.msg.MotorStatus()
      if self.right_motor is None:
        self.right_motor = hamr_test.msg.MotorStatus()
      if self.turret_motor is None:
        self.turret_motor = hamr_test.msg.MotorStatus()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.timestamp.secs, _x.timestamp.nsecs, _x.looptime, _x.left_motor.position, _x.left_motor.velocity, _x.left_motor.desired_velocity, _x.right_motor.position, _x.right_motor.velocity, _x.right_motor.desired_velocity, _x.turret_motor.position, _x.turret_motor.velocity, _x.turret_motor.desired_velocity,) = _struct_2I2H2hH2hH2h.unpack(str[start:end])
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2I2H2hH2hH2h.pack(_x.timestamp.secs, _x.timestamp.nsecs, _x.looptime, _x.left_motor.position, _x.left_motor.velocity, _x.left_motor.desired_velocity, _x.right_motor.position, _x.right_motor.velocity, _x.right_motor.desired_velocity, _x.turret_motor.position, _x.turret_motor.velocity, _x.turret_motor.desired_velocity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.left_motor is None:
        self.left_motor = hamr_test.msg.MotorStatus()
      if self.right_motor is None:
        self.right_motor = hamr_test.msg.MotorStatus()
      if self.turret_motor is None:
        self.turret_motor = hamr_test.msg.MotorStatus()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.timestamp.secs, _x.timestamp.nsecs, _x.looptime, _x.left_motor.position, _x.left_motor.velocity, _x.left_motor.desired_velocity, _x.right_motor.position, _x.right_motor.velocity, _x.right_motor.desired_velocity, _x.turret_motor.position, _x.turret_motor.velocity, _x.turret_motor.desired_velocity,) = _struct_2I2H2hH2hH2h.unpack(str[start:end])
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2I2H2hH2hH2h = struct.Struct("<2I2H2hH2hH2h")
